$date
	Tue Jun 10 20:38:36 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module add16_tb $end
$var wire 32 ! sum [31:0] $end
$var reg 32 " a [31:0] $end
$var reg 32 # b [31:0] $end
$var integer 32 $ i [31:0] $end
$scope module uut $end
$var wire 32 % a [31:0] $end
$var wire 32 & b [31:0] $end
$var wire 32 ' sum [31:0] $end
$var wire 16 ( sl [15:0] $end
$var wire 16 ) sh [15:0] $end
$var wire 1 * cout_l $end
$var wire 1 + cout_h $end
$scope module add16_m1 $end
$var wire 16 , a [15:0] $end
$var wire 16 - b [15:0] $end
$var wire 1 . cin $end
$var wire 16 / sum [15:0] $end
$var wire 1 * cout $end
$var wire 16 0 carry [15:0] $end
$scope begin adder_loop[0] $end
$var parameter 2 1 i $end
$scope begin genblk1 $end
$scope module add1 $end
$var wire 1 2 a $end
$var wire 1 3 b $end
$var wire 1 . cin $end
$var wire 1 4 cout $end
$var wire 1 5 sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin adder_loop[1] $end
$var parameter 2 6 i $end
$scope begin genblk1 $end
$scope module add1 $end
$var wire 1 7 a $end
$var wire 1 8 b $end
$var wire 1 9 cin $end
$var wire 1 : cout $end
$var wire 1 ; sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin adder_loop[2] $end
$var parameter 3 < i $end
$scope begin genblk1 $end
$scope module add1 $end
$var wire 1 = a $end
$var wire 1 > b $end
$var wire 1 ? cin $end
$var wire 1 @ cout $end
$var wire 1 A sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin adder_loop[3] $end
$var parameter 3 B i $end
$scope begin genblk1 $end
$scope module add1 $end
$var wire 1 C a $end
$var wire 1 D b $end
$var wire 1 E cin $end
$var wire 1 F cout $end
$var wire 1 G sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin adder_loop[4] $end
$var parameter 4 H i $end
$scope begin genblk1 $end
$scope module add1 $end
$var wire 1 I a $end
$var wire 1 J b $end
$var wire 1 K cin $end
$var wire 1 L cout $end
$var wire 1 M sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin adder_loop[5] $end
$var parameter 4 N i $end
$scope begin genblk1 $end
$scope module add1 $end
$var wire 1 O a $end
$var wire 1 P b $end
$var wire 1 Q cin $end
$var wire 1 R cout $end
$var wire 1 S sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin adder_loop[6] $end
$var parameter 4 T i $end
$scope begin genblk1 $end
$scope module add1 $end
$var wire 1 U a $end
$var wire 1 V b $end
$var wire 1 W cin $end
$var wire 1 X cout $end
$var wire 1 Y sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin adder_loop[7] $end
$var parameter 4 Z i $end
$scope begin genblk1 $end
$scope module add1 $end
$var wire 1 [ a $end
$var wire 1 \ b $end
$var wire 1 ] cin $end
$var wire 1 ^ cout $end
$var wire 1 _ sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin adder_loop[8] $end
$var parameter 5 ` i $end
$scope begin genblk1 $end
$scope module add1 $end
$var wire 1 a a $end
$var wire 1 b b $end
$var wire 1 c cin $end
$var wire 1 d cout $end
$var wire 1 e sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin adder_loop[9] $end
$var parameter 5 f i $end
$scope begin genblk1 $end
$scope module add1 $end
$var wire 1 g a $end
$var wire 1 h b $end
$var wire 1 i cin $end
$var wire 1 j cout $end
$var wire 1 k sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin adder_loop[10] $end
$var parameter 5 l i $end
$scope begin genblk1 $end
$scope module add1 $end
$var wire 1 m a $end
$var wire 1 n b $end
$var wire 1 o cin $end
$var wire 1 p cout $end
$var wire 1 q sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin adder_loop[11] $end
$var parameter 5 r i $end
$scope begin genblk1 $end
$scope module add1 $end
$var wire 1 s a $end
$var wire 1 t b $end
$var wire 1 u cin $end
$var wire 1 v cout $end
$var wire 1 w sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin adder_loop[12] $end
$var parameter 5 x i $end
$scope begin genblk1 $end
$scope module add1 $end
$var wire 1 y a $end
$var wire 1 z b $end
$var wire 1 { cin $end
$var wire 1 | cout $end
$var wire 1 } sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin adder_loop[13] $end
$var parameter 5 ~ i $end
$scope begin genblk1 $end
$scope module add1 $end
$var wire 1 !" a $end
$var wire 1 "" b $end
$var wire 1 #" cin $end
$var wire 1 $" cout $end
$var wire 1 %" sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin adder_loop[14] $end
$var parameter 5 &" i $end
$scope begin genblk1 $end
$scope module add1 $end
$var wire 1 '" a $end
$var wire 1 (" b $end
$var wire 1 )" cin $end
$var wire 1 *" cout $end
$var wire 1 +" sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin adder_loop[15] $end
$var parameter 5 ," i $end
$scope begin genblk1 $end
$scope module add1 $end
$var wire 1 -" a $end
$var wire 1 ." b $end
$var wire 1 /" cin $end
$var wire 1 0" cout $end
$var wire 1 1" sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module add16_m2 $end
$var wire 16 2" a [15:0] $end
$var wire 16 3" b [15:0] $end
$var wire 1 * cin $end
$var wire 16 4" sum [15:0] $end
$var wire 1 + cout $end
$var wire 16 5" carry [15:0] $end
$scope begin adder_loop[0] $end
$var parameter 2 6" i $end
$scope begin genblk1 $end
$scope module add1 $end
$var wire 1 7" a $end
$var wire 1 8" b $end
$var wire 1 * cin $end
$var wire 1 9" cout $end
$var wire 1 :" sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin adder_loop[1] $end
$var parameter 2 ;" i $end
$scope begin genblk1 $end
$scope module add1 $end
$var wire 1 <" a $end
$var wire 1 =" b $end
$var wire 1 >" cin $end
$var wire 1 ?" cout $end
$var wire 1 @" sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin adder_loop[2] $end
$var parameter 3 A" i $end
$scope begin genblk1 $end
$scope module add1 $end
$var wire 1 B" a $end
$var wire 1 C" b $end
$var wire 1 D" cin $end
$var wire 1 E" cout $end
$var wire 1 F" sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin adder_loop[3] $end
$var parameter 3 G" i $end
$scope begin genblk1 $end
$scope module add1 $end
$var wire 1 H" a $end
$var wire 1 I" b $end
$var wire 1 J" cin $end
$var wire 1 K" cout $end
$var wire 1 L" sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin adder_loop[4] $end
$var parameter 4 M" i $end
$scope begin genblk1 $end
$scope module add1 $end
$var wire 1 N" a $end
$var wire 1 O" b $end
$var wire 1 P" cin $end
$var wire 1 Q" cout $end
$var wire 1 R" sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin adder_loop[5] $end
$var parameter 4 S" i $end
$scope begin genblk1 $end
$scope module add1 $end
$var wire 1 T" a $end
$var wire 1 U" b $end
$var wire 1 V" cin $end
$var wire 1 W" cout $end
$var wire 1 X" sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin adder_loop[6] $end
$var parameter 4 Y" i $end
$scope begin genblk1 $end
$scope module add1 $end
$var wire 1 Z" a $end
$var wire 1 [" b $end
$var wire 1 \" cin $end
$var wire 1 ]" cout $end
$var wire 1 ^" sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin adder_loop[7] $end
$var parameter 4 _" i $end
$scope begin genblk1 $end
$scope module add1 $end
$var wire 1 `" a $end
$var wire 1 a" b $end
$var wire 1 b" cin $end
$var wire 1 c" cout $end
$var wire 1 d" sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin adder_loop[8] $end
$var parameter 5 e" i $end
$scope begin genblk1 $end
$scope module add1 $end
$var wire 1 f" a $end
$var wire 1 g" b $end
$var wire 1 h" cin $end
$var wire 1 i" cout $end
$var wire 1 j" sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin adder_loop[9] $end
$var parameter 5 k" i $end
$scope begin genblk1 $end
$scope module add1 $end
$var wire 1 l" a $end
$var wire 1 m" b $end
$var wire 1 n" cin $end
$var wire 1 o" cout $end
$var wire 1 p" sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin adder_loop[10] $end
$var parameter 5 q" i $end
$scope begin genblk1 $end
$scope module add1 $end
$var wire 1 r" a $end
$var wire 1 s" b $end
$var wire 1 t" cin $end
$var wire 1 u" cout $end
$var wire 1 v" sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin adder_loop[11] $end
$var parameter 5 w" i $end
$scope begin genblk1 $end
$scope module add1 $end
$var wire 1 x" a $end
$var wire 1 y" b $end
$var wire 1 z" cin $end
$var wire 1 {" cout $end
$var wire 1 |" sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin adder_loop[12] $end
$var parameter 5 }" i $end
$scope begin genblk1 $end
$scope module add1 $end
$var wire 1 ~" a $end
$var wire 1 !# b $end
$var wire 1 "# cin $end
$var wire 1 ## cout $end
$var wire 1 $# sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin adder_loop[13] $end
$var parameter 5 %# i $end
$scope begin genblk1 $end
$scope module add1 $end
$var wire 1 &# a $end
$var wire 1 '# b $end
$var wire 1 (# cin $end
$var wire 1 )# cout $end
$var wire 1 *# sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin adder_loop[14] $end
$var parameter 5 +# i $end
$scope begin genblk1 $end
$scope module add1 $end
$var wire 1 ,# a $end
$var wire 1 -# b $end
$var wire 1 .# cin $end
$var wire 1 /# cout $end
$var wire 1 0# sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin adder_loop[15] $end
$var parameter 5 1# i $end
$scope begin genblk1 $end
$scope module add1 $end
$var wire 1 2# a $end
$var wire 1 3# b $end
$var wire 1 4# cin $end
$var wire 1 5# cout $end
$var wire 1 6# sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin loop_test $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b1111 1#
b1110 +#
b1101 %#
b1100 }"
b1011 w"
b1010 q"
b1001 k"
b1000 e"
b111 _"
b110 Y"
b101 S"
b100 M"
b11 G"
b10 A"
b1 ;"
b0 6"
b1111 ,"
b1110 &"
b1101 ~
b1100 x
b1011 r
b1010 l
b1001 f
b1000 `
b111 Z
b110 T
b101 N
b100 H
b11 B
b10 <
b1 6
b0 1
$end
#0
$dumpvars
06#
05#
04#
03#
02#
00#
0/#
0.#
0-#
0,#
0*#
0)#
0(#
0'#
0&#
0$#
0##
0"#
0!#
0~"
0|"
0{"
0z"
0y"
0x"
0v"
0u"
0t"
0s"
0r"
0p"
0o"
0n"
0m"
0l"
0j"
0i"
0h"
0g"
0f"
0d"
0c"
0b"
0a"
0`"
0^"
0]"
0\"
0["
0Z"
0X"
0W"
0V"
0U"
0T"
0R"
0Q"
0P"
0O"
0N"
0L"
0K"
0J"
0I"
0H"
0F"
0E"
0D"
0C"
0B"
0@"
0?"
0>"
0="
0<"
0:"
09"
08"
07"
b0 5"
b0 4"
b0 3"
b0 2"
01"
00"
0/"
0."
0-"
0+"
0*"
0)"
0("
0'"
0%"
0$"
0#"
0""
0!"
0}
0|
0{
0z
0y
0w
0v
0u
0t
0s
0q
0p
0o
0n
0m
0k
0j
0i
0h
0g
0e
0d
0c
0b
0a
0_
0^
0]
0\
0[
0Y
0X
0W
0V
0U
0S
0R
0Q
0P
0O
0M
0L
0K
0J
0I
0G
0F
0E
0D
0C
0A
0@
0?
0>
0=
0;
0:
09
08
07
05
04
03
02
b0 0
b0 /
0.
b0 -
b0 ,
0+
0*
b0 )
b0 (
b0 '
b0 &
b0 %
b0 $
b0 #
b0 "
b0 !
$end
#10
b10 !
b10 '
b10 (
b10 /
1;
19
b1 0
14
13
12
b1 -
b1 ,
b1 #
b1 &
b1 "
b1 %
b1 $
#20
b0 !
b0 '
b0 (
b0 /
0;
09
b0 0
04
03
02
b0 -
b0 ,
b0 #
b0 &
b0 "
b0 %
b10 $
#30
b10 !
b10 '
b10 (
b10 /
1;
19
b1 0
14
13
12
b1 -
b1 ,
b1 #
b1 &
b1 "
b1 %
b11 $
#40
b110 !
b110 '
b110 (
b110 /
1A
1?
b11 0
1:
18
17
b11 -
b11 ,
b11 #
b11 &
b11 "
b11 %
b100 $
#50
b0 )
b0 4"
0:"
0*
00"
0/"
0*"
0)"
0$"
0#"
0|
0{
0v
0u
0p
0o
0j
0i
0d
0c
0^
0]
0X
0W
0R
0Q
0L
0?
0:
0K
0F
09
04
0E
15
1;
1A
b0 0
0@
1G
1M
1S
1Y
1_
1e
1k
1q
1w
1}
1%"
1+"
b1111111111111111 !
b1111111111111111 '
b1111111111111111 (
b1111111111111111 /
11"
03
08
1=
1C
1I
1O
1U
1[
1a
1g
1m
1s
1y
1!"
1'"
1-"
b0 -
b1111111111111111 ,
b0 #
b0 &
b1111111111111111 "
b1111111111111111 %
b101 $
#60
b1 )
b1 4"
1:"
1*
10"
01"
1/"
1*"
0+"
1)"
1$"
0%"
1#"
1|
0}
1{
1v
0w
1u
1p
0q
1o
1j
0k
1i
1d
0e
1c
1^
0_
1]
1X
0Y
1W
1R
0S
1Q
1L
0M
1K
1F
0G
1E
1@
0A
1?
1:
0;
19
b1111111111111111 0
14
b10000000000000000 !
b10000000000000000 '
b0 (
b0 /
05
13
b1 -
b1 #
b1 &
b110 $
#70
b111 $
