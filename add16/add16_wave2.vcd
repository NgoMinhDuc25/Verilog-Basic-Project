$date
	Tue Jun 10 21:03:47 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module add16_tb $end
$var wire 32 ! sum [31:0] $end
$var reg 32 " a [31:0] $end
$var reg 32 # b [31:0] $end
$scope module uut $end
$var wire 32 $ a [31:0] $end
$var wire 32 % b [31:0] $end
$var wire 32 & sum [31:0] $end
$var wire 16 ' sl [15:0] $end
$var wire 16 ( sh [15:0] $end
$var wire 1 ) cout_l $end
$var wire 1 * cout_h $end
$scope module add16_m1 $end
$var wire 16 + a [15:0] $end
$var wire 16 , b [15:0] $end
$var wire 1 - cin $end
$var wire 16 . sum [15:0] $end
$var wire 1 ) cout $end
$var wire 16 / carry [15:0] $end
$scope begin adder_loop[0] $end
$var parameter 2 0 i $end
$scope begin genblk1 $end
$scope module add1 $end
$var wire 1 1 a $end
$var wire 1 2 b $end
$var wire 1 - cin $end
$var wire 1 3 cout $end
$var wire 1 4 sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin adder_loop[1] $end
$var parameter 2 5 i $end
$scope begin genblk1 $end
$scope module add1 $end
$var wire 1 6 a $end
$var wire 1 7 b $end
$var wire 1 8 cin $end
$var wire 1 9 cout $end
$var wire 1 : sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin adder_loop[2] $end
$var parameter 3 ; i $end
$scope begin genblk1 $end
$scope module add1 $end
$var wire 1 < a $end
$var wire 1 = b $end
$var wire 1 > cin $end
$var wire 1 ? cout $end
$var wire 1 @ sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin adder_loop[3] $end
$var parameter 3 A i $end
$scope begin genblk1 $end
$scope module add1 $end
$var wire 1 B a $end
$var wire 1 C b $end
$var wire 1 D cin $end
$var wire 1 E cout $end
$var wire 1 F sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin adder_loop[4] $end
$var parameter 4 G i $end
$scope begin genblk1 $end
$scope module add1 $end
$var wire 1 H a $end
$var wire 1 I b $end
$var wire 1 J cin $end
$var wire 1 K cout $end
$var wire 1 L sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin adder_loop[5] $end
$var parameter 4 M i $end
$scope begin genblk1 $end
$scope module add1 $end
$var wire 1 N a $end
$var wire 1 O b $end
$var wire 1 P cin $end
$var wire 1 Q cout $end
$var wire 1 R sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin adder_loop[6] $end
$var parameter 4 S i $end
$scope begin genblk1 $end
$scope module add1 $end
$var wire 1 T a $end
$var wire 1 U b $end
$var wire 1 V cin $end
$var wire 1 W cout $end
$var wire 1 X sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin adder_loop[7] $end
$var parameter 4 Y i $end
$scope begin genblk1 $end
$scope module add1 $end
$var wire 1 Z a $end
$var wire 1 [ b $end
$var wire 1 \ cin $end
$var wire 1 ] cout $end
$var wire 1 ^ sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin adder_loop[8] $end
$var parameter 5 _ i $end
$scope begin genblk1 $end
$scope module add1 $end
$var wire 1 ` a $end
$var wire 1 a b $end
$var wire 1 b cin $end
$var wire 1 c cout $end
$var wire 1 d sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin adder_loop[9] $end
$var parameter 5 e i $end
$scope begin genblk1 $end
$scope module add1 $end
$var wire 1 f a $end
$var wire 1 g b $end
$var wire 1 h cin $end
$var wire 1 i cout $end
$var wire 1 j sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin adder_loop[10] $end
$var parameter 5 k i $end
$scope begin genblk1 $end
$scope module add1 $end
$var wire 1 l a $end
$var wire 1 m b $end
$var wire 1 n cin $end
$var wire 1 o cout $end
$var wire 1 p sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin adder_loop[11] $end
$var parameter 5 q i $end
$scope begin genblk1 $end
$scope module add1 $end
$var wire 1 r a $end
$var wire 1 s b $end
$var wire 1 t cin $end
$var wire 1 u cout $end
$var wire 1 v sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin adder_loop[12] $end
$var parameter 5 w i $end
$scope begin genblk1 $end
$scope module add1 $end
$var wire 1 x a $end
$var wire 1 y b $end
$var wire 1 z cin $end
$var wire 1 { cout $end
$var wire 1 | sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin adder_loop[13] $end
$var parameter 5 } i $end
$scope begin genblk1 $end
$scope module add1 $end
$var wire 1 ~ a $end
$var wire 1 !" b $end
$var wire 1 "" cin $end
$var wire 1 #" cout $end
$var wire 1 $" sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin adder_loop[14] $end
$var parameter 5 %" i $end
$scope begin genblk1 $end
$scope module add1 $end
$var wire 1 &" a $end
$var wire 1 '" b $end
$var wire 1 (" cin $end
$var wire 1 )" cout $end
$var wire 1 *" sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin adder_loop[15] $end
$var parameter 5 +" i $end
$scope begin genblk1 $end
$scope module add1 $end
$var wire 1 ," a $end
$var wire 1 -" b $end
$var wire 1 ." cin $end
$var wire 1 /" cout $end
$var wire 1 0" sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module add16_m2 $end
$var wire 16 1" a [15:0] $end
$var wire 16 2" b [15:0] $end
$var wire 1 ) cin $end
$var wire 16 3" sum [15:0] $end
$var wire 1 * cout $end
$var wire 16 4" carry [15:0] $end
$scope begin adder_loop[0] $end
$var parameter 2 5" i $end
$scope begin genblk1 $end
$scope module add1 $end
$var wire 1 6" a $end
$var wire 1 7" b $end
$var wire 1 ) cin $end
$var wire 1 8" cout $end
$var wire 1 9" sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin adder_loop[1] $end
$var parameter 2 :" i $end
$scope begin genblk1 $end
$scope module add1 $end
$var wire 1 ;" a $end
$var wire 1 <" b $end
$var wire 1 =" cin $end
$var wire 1 >" cout $end
$var wire 1 ?" sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin adder_loop[2] $end
$var parameter 3 @" i $end
$scope begin genblk1 $end
$scope module add1 $end
$var wire 1 A" a $end
$var wire 1 B" b $end
$var wire 1 C" cin $end
$var wire 1 D" cout $end
$var wire 1 E" sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin adder_loop[3] $end
$var parameter 3 F" i $end
$scope begin genblk1 $end
$scope module add1 $end
$var wire 1 G" a $end
$var wire 1 H" b $end
$var wire 1 I" cin $end
$var wire 1 J" cout $end
$var wire 1 K" sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin adder_loop[4] $end
$var parameter 4 L" i $end
$scope begin genblk1 $end
$scope module add1 $end
$var wire 1 M" a $end
$var wire 1 N" b $end
$var wire 1 O" cin $end
$var wire 1 P" cout $end
$var wire 1 Q" sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin adder_loop[5] $end
$var parameter 4 R" i $end
$scope begin genblk1 $end
$scope module add1 $end
$var wire 1 S" a $end
$var wire 1 T" b $end
$var wire 1 U" cin $end
$var wire 1 V" cout $end
$var wire 1 W" sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin adder_loop[6] $end
$var parameter 4 X" i $end
$scope begin genblk1 $end
$scope module add1 $end
$var wire 1 Y" a $end
$var wire 1 Z" b $end
$var wire 1 [" cin $end
$var wire 1 \" cout $end
$var wire 1 ]" sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin adder_loop[7] $end
$var parameter 4 ^" i $end
$scope begin genblk1 $end
$scope module add1 $end
$var wire 1 _" a $end
$var wire 1 `" b $end
$var wire 1 a" cin $end
$var wire 1 b" cout $end
$var wire 1 c" sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin adder_loop[8] $end
$var parameter 5 d" i $end
$scope begin genblk1 $end
$scope module add1 $end
$var wire 1 e" a $end
$var wire 1 f" b $end
$var wire 1 g" cin $end
$var wire 1 h" cout $end
$var wire 1 i" sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin adder_loop[9] $end
$var parameter 5 j" i $end
$scope begin genblk1 $end
$scope module add1 $end
$var wire 1 k" a $end
$var wire 1 l" b $end
$var wire 1 m" cin $end
$var wire 1 n" cout $end
$var wire 1 o" sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin adder_loop[10] $end
$var parameter 5 p" i $end
$scope begin genblk1 $end
$scope module add1 $end
$var wire 1 q" a $end
$var wire 1 r" b $end
$var wire 1 s" cin $end
$var wire 1 t" cout $end
$var wire 1 u" sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin adder_loop[11] $end
$var parameter 5 v" i $end
$scope begin genblk1 $end
$scope module add1 $end
$var wire 1 w" a $end
$var wire 1 x" b $end
$var wire 1 y" cin $end
$var wire 1 z" cout $end
$var wire 1 {" sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin adder_loop[12] $end
$var parameter 5 |" i $end
$scope begin genblk1 $end
$scope module add1 $end
$var wire 1 }" a $end
$var wire 1 ~" b $end
$var wire 1 !# cin $end
$var wire 1 "# cout $end
$var wire 1 ## sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin adder_loop[13] $end
$var parameter 5 $# i $end
$scope begin genblk1 $end
$scope module add1 $end
$var wire 1 %# a $end
$var wire 1 &# b $end
$var wire 1 '# cin $end
$var wire 1 (# cout $end
$var wire 1 )# sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin adder_loop[14] $end
$var parameter 5 *# i $end
$scope begin genblk1 $end
$scope module add1 $end
$var wire 1 +# a $end
$var wire 1 ,# b $end
$var wire 1 -# cin $end
$var wire 1 .# cout $end
$var wire 1 /# sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin adder_loop[15] $end
$var parameter 5 0# i $end
$scope begin genblk1 $end
$scope module add1 $end
$var wire 1 1# a $end
$var wire 1 2# b $end
$var wire 1 3# cin $end
$var wire 1 4# cout $end
$var wire 1 5# sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b1111 0#
b1110 *#
b1101 $#
b1100 |"
b1011 v"
b1010 p"
b1001 j"
b1000 d"
b111 ^"
b110 X"
b101 R"
b100 L"
b11 F"
b10 @"
b1 :"
b0 5"
b1111 +"
b1110 %"
b1101 }
b1100 w
b1011 q
b1010 k
b1001 e
b1000 _
b111 Y
b110 S
b101 M
b100 G
b11 A
b10 ;
b1 5
b0 0
$end
#0
$dumpvars
05#
04#
03#
02#
01#
0/#
0.#
0-#
0,#
0+#
0)#
0(#
0'#
0&#
0%#
0##
0"#
0!#
0~"
0}"
0{"
0z"
0y"
0x"
0w"
0u"
0t"
0s"
0r"
0q"
0o"
0n"
0m"
0l"
0k"
0i"
0h"
0g"
0f"
0e"
0c"
0b"
0a"
0`"
0_"
0]"
0\"
0["
0Z"
0Y"
0W"
0V"
0U"
0T"
0S"
0Q"
0P"
0O"
0N"
0M"
0K"
0J"
0I"
0H"
0G"
0E"
0D"
0C"
0B"
0A"
0?"
0>"
0="
0<"
0;"
09"
08"
07"
06"
b0 4"
b0 3"
b0 2"
b0 1"
00"
0/"
0."
0-"
0,"
0*"
0)"
0("
0'"
0&"
0$"
0#"
0""
0!"
0~
0|
0{
0z
0y
0x
0v
0u
0t
0s
0r
0p
0o
0n
0m
0l
0j
0i
0h
0g
0f
0d
0c
0b
0a
0`
0^
0]
0\
0[
0Z
0X
0W
0V
0U
0T
0R
0Q
0P
0O
0N
0L
0K
0J
0I
0H
0F
0E
0D
0C
0B
0@
0?
0>
0=
0<
0:
09
08
07
06
04
03
02
01
b0 /
b0 .
0-
b0 ,
b0 +
0*
0)
b0 (
b0 '
b0 &
b0 %
b0 $
b0 #
b0 "
b0 !
$end
#10
b1 !
b1 &
b1 '
b1 .
14
12
b1 ,
b1 #
b1 %
#15
02
11
b0 ,
b1 +
b0 #
b0 %
b1 "
b1 $
#20
1:
18
b1 /
13
b10 !
b10 &
b10 '
b10 .
04
12
b1 ,
b1 #
b1 %
#25
0:
08
b0 /
03
b1 !
b1 &
b1 '
b1 .
14
01
b0 +
b0 "
b0 $
#30
1@
1>
19
18
b11 /
13
0:
b100 !
b100 &
b100 '
b100 .
04
17
11
b11 ,
b1 +
b11 #
b11 %
b1 "
b1 $
#35
b110 !
b110 &
b110 '
b110 .
1:
16
b11 +
b11 "
b11 $
#40
b0 (
b0 3"
09"
0)
0/"
0."
0)"
0("
0#"
0""
0{
0z
0u
0t
0o
0n
0i
0h
0c
0b
0]
0\
0W
0V
0Q
0P
0K
0>
09
0J
0E
08
03
0D
14
1:
1@
b0 /
0?
1F
1L
1R
1X
1^
1d
1j
1p
1v
1|
1$"
1*"
b1111111111111111 !
b1111111111111111 &
b1111111111111111 '
b1111111111111111 .
10"
02
07
1<
1B
1H
1N
1T
1Z
1`
1f
1l
1r
1x
1~
1&"
1,"
b0 ,
b1111111111111111 +
b0 #
b0 %
b1111111111111111 "
b1111111111111111 $
#45
b1 (
b1 3"
19"
1)
1/"
00"
1."
1)"
0*"
1("
1#"
0$"
1""
1{
0|
1z
1u
0v
1t
1o
0p
1n
1i
0j
1h
1c
0d
1b
1]
0^
1\
1W
0X
1V
1Q
0R
1P
1K
0L
1J
1E
0F
1D
1?
0@
1>
19
0:
18
b1111111111111111 /
13
b10000000000000000 !
b10000000000000000 &
b0 '
b0 .
04
12
b1 ,
b1 #
b1 %
#55
